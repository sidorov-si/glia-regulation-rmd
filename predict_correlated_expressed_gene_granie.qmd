---
title: "Transcription regulation in gliogenesis"
author: "Sviatoslav Sidorov"
format: html
editor: visual
---

## Load libraries

```{r}
library(GRaNIE)
library(dplyr)
library(stringr)
library(tibble)
library(magrittr)
library(DESeq2)
library(biomaRt)
```

## Define constants and helper functions

```{r}
# Define helper functions
source("helper_functions_granie.R")

# Parameters for choosing significantly regulated regions
fdr = 0.01
min.l2fc = 2 # Min log2(fold change) | 1
min.baseMean = 100 # 20, 40

# FDR for NFIA motif matches
fdr.matches = 0.05

# Radius of region-gene assignment vicinities around regions
vicinity.radius = 500 # kbp

# Prefix of gene names to exclude from the analysis
genes.to.exclude = "ERCC-" # exclude spike-in control
```

## Preprocess gene expression counts

Load gene expression raw counts, exclude the spike-in control and retain only WT samples from Day 7, 9 or 11:

```{r}
master_table_genes = assays(readRDS("../input/salmon.merged.gene_counts.rds"))$counts %>%
  rownames_to_column(var = "gene_name") %>%
  filter(!stringr::str_detect(gene_name, fixed(genes.to.exclude))) %>%
  column_to_rownames(var = "gene_name") %>%
  dplyr::select(all_of(names(.)[stringr::str_detect(names(.), "WT_D[179]+_")]))
```

Add Ensembl IDs to all genes and exclude genes without Ensembl IDs. Use Ensembl v102, as it is the last version of the Ensembl database whose dataset `mmusculus_gene_ensembl` is still based on the reference assembly GRCm38 which corresponds to the assembly mm10 used in the expression and chromatin accessibility quantification:

```{r}
gene_id_name = read.delim("../input/ensembl102_grcm38p6_gene_id_names.tsv",
                           header = F,
                           sep = "\t") %>%
  dplyr::rename("gene_id" = "V1",
                "gene_name" = "V2")

master_table_genes %<>%
  rownames_to_column(var = "gene_name") %>%
  left_join(gene_id_name,
            by = c("gene_name" = "gene_name")) %>%
  filter(!is.na(gene_id)) %>%
  dplyr::select(-gene_name) %>%
  dplyr::select(gene_id,
                all_of(names(.)[stringr::str_detect(names(.), "WT_D[179]+_")]))

# Some genes have more than one Ensembl ID, hence the warning.

# Table ../input/ensembl102_grcm38p6_gene_id_names.tsv was obtained using the following commands:

# ensembl = useEnsembl(biomart = "ensembl",
#                      dataset = "mmusculus_gene_ensembl",
#                      version = "102")
# 
# gene_id_name = getBM(attributes = c("ensembl_gene_id",
#                                     "external_gene_name"),
#                      mart = ensembl)
# 
# write.table(gene_id_name,
#             "../input/ensembl102_grcm38p6_gene_id_names.tsv",
#             quote = F,
#             sep = "\t",
#             row.names = F,
#             col.names = F)
```

Generate domain-specific gene expression tables with raw counts:

```{r}
p1_gene_expression = master_table_genes %>%
  dplyr::select(gene_id, 
                all_of(names(.)[stringr::str_detect(names(.), "p1")]))

p2_gene_expression = master_table_genes %>%
  dplyr::select(gene_id, 
                all_of(names(.)[stringr::str_detect(names(.), "p2")]))

pM_gene_expression = master_table_genes %>%
  dplyr::select(gene_id,
                all_of(names(.)[stringr::str_detect(names(.), "pM")]))
```

Unload the gene expression master table from memory:

```{r}
rm(master_table_genes)
```

## Preprocess region accessibility counts

Load raw accessibility counts, retain only WT samples from Day 7, 9 or 11 and create the region annotation:

```{r}
master_table_regions = read.delim(file = "../input/consensus_peaks.mRp.clN.featureCounts.txt",
                                  header = T,
                                  sep = "\t",
                                  skip = 1)

names(master_table_regions) = gsub(pattern = ".mLb.clN.bam", 
                                   replacement = "", 
                                   x = names(master_table_regions))

region_annot = master_table_regions %>%
  dplyr::select(Geneid,
                Chr,
                Start,
                End,
                Strand,
                Length)

master_table_regions %<>%
  mutate(region_id = paste0(Chr, ":", Start, "-", End)) %>%
  dplyr::select(region_id, 
                all_of(names(.)[stringr::str_detect(names(.), "WT_D[179]+_")]))
```

Generate domain-specific region accessibility tables with raw counts:

```{r}
p1_region_accessibility = master_table_regions %>%
  dplyr::select(region_id, 
                all_of(names(.)[stringr::str_detect(names(.), "p1")]))

p2_region_accessibility = master_table_regions %>%
  dplyr::select(region_id, 
                all_of(names(.)[stringr::str_detect(names(.), "p2")]))

pM_region_accessibility = master_table_regions %>%
  dplyr::select(region_id, 
                all_of(names(.)[stringr::str_detect(names(.), "pM")]))
```

Unload the region accessibility master table from memory:

```{r}
rm(master_table_regions)
```

## Create GRNs

Create domain-specific tables of sample metadata:

```{r}
sample_meta_p1 = generate_sample_meta(p1_gene_expression, p1_region_accessibility)

sample_meta_p2 = generate_sample_meta(p2_gene_expression, p2_region_accessibility)

sample_meta_pM = generate_sample_meta(pM_gene_expression, pM_region_accessibility)
```

Initialize GRNs:

```{r}
grn_p1 = initializeGRN(objectMetadata = list(domain = "p1"),
                       outputFolder = "../r_results/predict_correlated_expressed_gene_granie/grn_p1",
                       genomeAssembly = "mm10")

grn_p2 = initializeGRN(objectMetadata = list(domain = "p2"),
                       outputFolder = "../r_results/predict_correlated_expressed_gene_granie/grn_p2",
                       genomeAssembly = "mm10")

grn_pM = initializeGRN(objectMetadata = list(domain = "pM"),
                       outputFolder = "../r_results/predict_correlated_expressed_gene_granie/grn_pM",
                       genomeAssembly = "mm10")
```

Add data to GRNs (by default, ):

```{r}
grn.p1 = addData(GRN = grn_p1,
                 counts_peaks = p1_region_accessibility,
                 normalization_peaks = "DESeq2_sizeFactors",
                 idColumn_peaks = "region_id",
                 counts_rna = p1_gene_expression,
                 normalization_rna = "limma_quantile",
                 idColumn_RNA = "gene_id",
                 sampleMetadata = sample_meta_p1,
                 forceRerun = T)

grn.p2 = addData(GRN = grn_p2,
                 counts_peaks = p2_region_accessibility,
                 normalization_peaks = "DESeq2_sizeFactors",
                 idColumn_peaks = "region_id",
                 counts_rna = p2_gene_expression,
                 normalization_rna = "limma_quantile",
                 idColumn_RNA = "gene_id",
                 sampleMetadata = sample_meta_p2,
                 forceRerun = T)

grn.pM = addData(GRN = grn_pM,
                 counts_peaks = pM_region_accessibility,
                 normalization_peaks = "DESeq2_sizeFactors",
                 idColumn_peaks = "region_id",
                 counts_rna = pM_gene_expression,
                 normalization_rna = "limma_quantile",
                 idColumn_RNA = "gene_id",
                 sampleMetadata = sample_meta_pM,
                 forceRerun = T)
```

