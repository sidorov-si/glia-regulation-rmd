---
title: "Transcription regulation in gliogenesis"
author: "Sviatoslav Sidorov"
format: html
editor: source
---

## Load libraries

```{r}
library(GRaNIE)
library(dplyr)
library(stringr)
library(tibble)
library(magrittr)
library(DESeq2)
library(biomaRt)
library(readr)
library(ggplot2)
```

## Define constants and helper functions

```{r}
# Define helper functions
source("helper_functions_granie.R")

# Min norm mean counts to filter genes and regions (peaks)
min.norm.rna.counts = 10 # 5, 20
min.norm.peak.counts = 10 # 5, 20

# Radius of region-gene assignment vicinities around regions
vicinity.radius = 500000 # bp

# Prefix of gene names to exclude from the analysis
genes.to.exclude = "ERCC-" # exclude spike-in control

# Parameters for choosing significantly regulated regions
fdr = 0.01
min.l2fc = 2 # Min log2(fold change)
min.baseMean = 100

# FDR for NFIA motif matches
fdr.matches = 0.05

# FDR for predicted region-gene pairs
fdr.pairs = 0.2
```

## Preprocess gene expression counts

Load gene expression raw counts, exclude the spike-in control and retain only WT samples from Day 7, 9 or 11:

```{r}
master_table_genes = assays(readRDS("../input/salmon.merged.gene_counts.rds"))$counts %>%
  rownames_to_column(var = "gene_name") %>%
  filter(!stringr::str_detect(gene_name, fixed(genes.to.exclude))) %>%
  column_to_rownames(var = "gene_name") %>%
  dplyr::select(all_of(names(.)[stringr::str_detect(names(.), "WT_D[179]+_")]))
```

Add Ensembl IDs to all genes and exclude genes without Ensembl IDs. Use Ensembl v102, as it is the last version of the Ensembl database whose dataset `mmusculus_gene_ensembl` is still based on the reference assembly GRCm38 which corresponds to the assembly mm10 used in the expression and chromatin accessibility quantification:

```{r}
gene_id_name = read.delim("../input/ensembl102_grcm38p6_gene_id_names.tsv",
                           header = F,
                           sep = "\t") %>%
  dplyr::rename("gene_id" = "V1",
                "gene_name" = "V2")

master_table_genes %<>%
  rownames_to_column(var = "gene_name") %>%
  left_join(gene_id_name,
            by = c("gene_name" = "gene_name")) %>%
  filter(!is.na(gene_id)) %>%
  dplyr::select(-gene_name) %>%
  dplyr::select(gene_id,
                all_of(names(.)[stringr::str_detect(names(.), "WT_D[179]+_")]))

# Some genes have more than one Ensembl ID, hence the warning.

# Table ../input/ensembl102_grcm38p6_gene_id_names.tsv was obtained using the following commands:

# ensembl = useEnsembl(biomart = "ensembl",
#                      dataset = "mmusculus_gene_ensembl",
#                      version = "102")
# 
# gene_id_name = getBM(attributes = c("ensembl_gene_id",
#                                     "external_gene_name"),
#                      mart = ensembl)
# 
# write.table(gene_id_name,
#             "../input/ensembl102_grcm38p6_gene_id_names.tsv",
#             quote = F,
#             sep = "\t",
#             row.names = F,
#             col.names = F)
```

Generate domain-specific gene expression tables with raw counts:

```{r}
p1_gene_expression = master_table_genes %>%
  dplyr::select(gene_id, 
                all_of(names(.)[stringr::str_detect(names(.), "p1")]))

p2_gene_expression = master_table_genes %>%
  dplyr::select(gene_id, 
                all_of(names(.)[stringr::str_detect(names(.), "p2")]))

pM_gene_expression = master_table_genes %>%
  dplyr::select(gene_id,
                all_of(names(.)[stringr::str_detect(names(.), "pM")]))
```

Unload the gene expression master table from memory:

```{r}
rm(master_table_genes)
```

## Preprocess region accessibility counts

Load raw accessibility counts, retain only WT samples from Day 7, 9 or 11 and create the region annotation:

```{r}
master_table_regions = read.delim(file = "../input/consensus_peaks.mRp.clN.featureCounts.txt",
                                  header = T,
                                  sep = "\t",
                                  skip = 1)

names(master_table_regions) = gsub(pattern = ".mLb.clN.bam", 
                                   replacement = "", 
                                   x = names(master_table_regions))

region_annot = master_table_regions %>%
  dplyr::select(Geneid,
                Chr,
                Start,
                End,
                Strand,
                Length)

master_table_regions %<>%
  mutate(region_id = paste0(Chr, ":", Start, "-", End)) %>%
  dplyr::select(region_id, 
                all_of(names(.)[stringr::str_detect(names(.), "WT_D[179]+_")]))
```

Generate domain-specific region accessibility tables with raw counts:

```{r}
p1_region_accessibility = master_table_regions %>%
  dplyr::select(region_id, 
                all_of(names(.)[stringr::str_detect(names(.), "p1")]))

p2_region_accessibility = master_table_regions %>%
  dplyr::select(region_id, 
                all_of(names(.)[stringr::str_detect(names(.), "p2")]))

pM_region_accessibility = master_table_regions %>%
  dplyr::select(region_id, 
                all_of(names(.)[stringr::str_detect(names(.), "pM")]))
```

Unload the region accessibility master table from memory:

```{r}
rm(master_table_regions)
```

## Create GRNs

Create domain-specific tables of sample metadata:

```{r}
sample_meta_p1 = generate_sample_meta(p1_gene_expression, p1_region_accessibility)

sample_meta_p2 = generate_sample_meta(p2_gene_expression, p2_region_accessibility)

sample_meta_pM = generate_sample_meta(pM_gene_expression, pM_region_accessibility)
```

Initialize GRNs:

```{r}
grn_p1 = initializeGRN(objectMetadata = list(domain = "p1"),
                       outputFolder = "../r_results/predict_correlated_expressed_gene_granie/grn_p1",
                       genomeAssembly = "mm10")

grn_p2 = initializeGRN(objectMetadata = list(domain = "p2"),
                       outputFolder = "../r_results/predict_correlated_expressed_gene_granie/grn_p2",
                       genomeAssembly = "mm10")

grn_pM = initializeGRN(objectMetadata = list(domain = "pM"),
                       outputFolder = "../r_results/predict_correlated_expressed_gene_granie/grn_pM",
                       genomeAssembly = "mm10")
```

Add data to GRNs (as of version 1.3.25, GRaNIE still does not allow a custom genome annotation, so it will use the latest version of the Ensembl annotation of the mouse genome):

```{r}
grn_p1 = addData(GRN = grn_p1,
                 counts_peaks = p1_region_accessibility,
                 normalization_peaks = "DESeq2_sizeFactors",
                 idColumn_peaks = "region_id",
                 counts_rna = p1_gene_expression,
                 normalization_rna = "limma_quantile",
                 idColumn_RNA = "gene_id",
                 sampleMetadata = sample_meta_p1,
                 forceRerun = T)

grn_p2 = addData(GRN = grn_p2,
                 counts_peaks = p2_region_accessibility,
                 normalization_peaks = "DESeq2_sizeFactors",
                 idColumn_peaks = "region_id",
                 counts_rna = p2_gene_expression,
                 normalization_rna = "limma_quantile",
                 idColumn_RNA = "gene_id",
                 sampleMetadata = sample_meta_p2,
                 forceRerun = T)

grn_pM = addData(GRN = grn_pM,
                 counts_peaks = pM_region_accessibility,
                 normalization_peaks = "DESeq2_sizeFactors",
                 idColumn_peaks = "region_id",
                 counts_rna = pM_gene_expression,
                 normalization_rna = "limma_quantile",
                 idColumn_RNA = "gene_id",
                 sampleMetadata = sample_meta_pM,
                 forceRerun = T)
```

PCA plot for gene expression:

```{r}
plotPCA_all(GRN = grn_p1,
            data = c("rna"),
            basenameOutput = "p1_pca",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Samples from Day 9 and Day 11 are mostly separated by PC2, while Day 7 is not separated by PC2 from Day 9 because of one sample (WT_D7_p1_NFIAn_R3) positioned together with samples from Day 9. However, this does not make biological sense, as on Day 7 the NFIA-dependent gliogenesis program is still inactive, and for the same reason the separation of the other two Day 7 samples from the rest makes sense. Therefore, to obtain a clear separation of Day 7 samples from Day 9 and 11 samples, I will remove the "outlier" sample (WT_D7_p1_NFIAn_R3).

PCA plot for region accessibility:

```{r}
plotPCA_all(GRN = grn_p1,
            data = c("peaks"),
            basenameOutput = "p1_pca",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Samples are very clearly grouped by the day and separated by PC1. Interestingly, the between-sample difference, compared to the between-day difference, is much smaller in region accessibility than in gene expression.

Remove sample WT_D7_p1_NFIAn_R3 from the p1 gene expression table, as discussed above:

```{r}
p1_gene_expression %<>% dplyr::select(-WT_D7_p1_NFIAn_R3)
```

Re-create the p1 GRN without the excluded sample:

```{r}
sample_meta_p1 = generate_sample_meta(p1_gene_expression, p1_region_accessibility)

grn_p1 = initializeGRN(objectMetadata = list(domain = "p1"),
                       outputFolder = "../r_results/predict_correlated_expressed_gene_granie/grn_p1",
                       genomeAssembly = "mm10")

grn_p1 = addData(GRN = grn_p1,
                 counts_peaks = p1_region_accessibility,
                 normalization_peaks = "DESeq2_sizeFactors",
                 idColumn_peaks = "region_id",
                 counts_rna = p1_gene_expression,
                 normalization_rna = "limma_quantile",
                 idColumn_RNA = "gene_id",
                 sampleMetadata = sample_meta_p1,
                 forceRerun = T)
```

Do PCA again for the p1 GRN without the excluded sample.

PCA plot for gene expression without the excluded sample:

```{r}
plotPCA_all(GRN = grn_p1,
            data = c("rna"),
            basenameOutput = "p1_pca_noout",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Now the two remaining samples from Day 7 are clearly separated by PC1 from the samples from Day 9 and Day 11 which, in turn, are not separated from each other. This makes sense.

PCA plot for region accessibility without the excluded sample:

```{r}
plotPCA_all(GRN = grn_p1,
            data = c("peaks"),
            basenameOutput = "p1_pca_noout",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

The clear separation of samples from Day 7, 9 and 11 did not change, which makes sense (as the excluded sample was not an outlier in the original PCA plot for peak accessibility).

Make a p2-specific PCA plot for RNA-seq samples:

```{r}
plotPCA_all(GRN = grn_p2,
            data = c("rna"),
            basenameOutput = "p2_pca",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Samples from Day 7, 9 and 11 are separated by PC2. All good. Of note, NFIA-negative samples from Day 9 group together with NFIA-positive samples from the same day and not to samples from Day 7. This fact suggests that NFIA-negative samples are not really "negative."

Make a p2-specific PCA plot for ATAC-seq samples:

```{r}
plotPCA_all(GRN = grn_p2,
            data = c("peaks"),
            basenameOutput = "p2_pca",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Samples from Day 7, 9 and 11 are separated by PC1. All good.

Make a pM-specific PCA plot for RNA-seq samples:

```{r}
plotPCA_all(GRN = grn_pM,
            data = c("rna"),
            basenameOutput = "pM_pca",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Samples from Day 7, 9 and 11 are separated by PC2, and samples from Day 7 are located further from the rest of the samples (along the PC2 axis) than Day 9 samples from Day 11 samples. All good. Again, NFIA-negative Day 9 samples group with NFIA-positive Day 9 samples and not with Day 7 samples, which again suggests that the "NFIA-negative" samples are actually not NFIA-negative.

Make a pM-specific PCA plot for ATAC-seq samples:

```{r}
plotPCA_all(GRN = grn_pM,
            data = c("peaks"),
            basenameOutput = "pM_pca",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Samples from Day 7, 9 and 11 are separated by PC1. All good.

## Filter genes and peaks

Remove low-count and low-variability genes and peaks:

```{r}
grn_p1 = filterData(GRN = grn_p1,
                    minNormalizedMean_peaks = min.norm.peak.counts, 
                    minNormalizedMeanRNA = min.norm.rna.counts, 
                    forceRerun = T)

grn_p2 = filterData(GRN = grn_p2,
                    minNormalizedMean_peaks = min.norm.peak.counts, 
                    minNormalizedMeanRNA = min.norm.rna.counts, 
                    forceRerun = T)

grn_pM = filterData(GRN = grn_pM,
                    minNormalizedMean_peaks = min.norm.peak.counts, 
                    minNormalizedMeanRNA = min.norm.rna.counts,
                    forceRerun = T)
```

## Predict regulatory connections

Predict enhancer-gene connections in all the three domains:

```{r}
grn_p1 = addConnections_peak_gene(GRN = grn_p1,
                                  overlapTypeGene = "TSS",
                                  corMethod = "pearson",
                                  promoterRange = vicinity.radius,
                                  nCores = 2,
                                  plotDiagnosticPlots = T,
                                  forceRerun = T)

grn_p2 = addConnections_peak_gene(GRN = grn_p2,
                                  overlapTypeGene = "TSS",
                                  corMethod = "pearson",
                                  promoterRange = vicinity.radius,
                                  nCores = 2,
                                  plotDiagnosticPlots = T,
                                  forceRerun = T)

grn_pM = addConnections_peak_gene(GRN = grn_pM,
                                  overlapTypeGene = "TSS",
                                  corMethod = "pearson",
                                  promoterRange = vicinity.radius,
                                  nCores = 2,
                                  plotDiagnosticPlots = T,
                                  forceRerun = T)
```

Save the GRN objects:

```{r}
saveRDS(grn_p1,
        "../r_results/predict_correlated_expressed_gene_granie/grn_p1/grn_p1.rds")

saveRDS(grn_p2,
        "../r_results/predict_correlated_expressed_gene_granie/grn_p2/grn_p2.rds")

saveRDS(grn_pM,
        "../r_results/predict_correlated_expressed_gene_granie/grn_pM/grn_pM.rds")
```

For p1, the QC plots on page 1 of the corresponding PDF look good: (1) The raw p-value density for positively correlated connections for the real signal peak at the smallest p-values (and although the density for the negatively correlated connections peaks at the same p-value range, the peak is much lower); (2) The ratio of positively correlated connections to negatively correlated connections is higher for real connections than for background connections; (3) Real connections demonstrate a larger number of the more extreme correlation coefficients than background connections.

For p2, the QC plots on page 1 of the corresponding PDF look worse than for p1, but still acceptable: (1) Almost the same as for p1 (looks OK); (2) The ratio of positively correlated connections to negatively correlated connections is higher for real connections than for background connections, but negligibly; (3) Real connections demonstrate a larger number of the more extreme correlation coefficients than background connections, but much less so than in p1.

For pMN, the QC plots on page 1 of the corresponding PDF look worse than for p1, but still acceptable: (1) Almost the same as for p2 (the background distributions are even less uniform than in p2 but are still OK); (2) The ratio of positively correlated connections to negatively correlated connections is higher for real connections than for background connections, but negligibly (exactly like for p2); (3) Real connections demonstrate a larger number of the more extreme correlation coefficients than background connections, but not as much as for p1 (although the distributions definitely look more different at flanks than for p2).

The weak dominance of positively correlated connections over negatively correlated connections in all the three domains (and especially in p2 and pMN) could be explained by either any technical problems with the data (for example, the number of samples for each domain is less than 12 which is considered the minimal number of samples for the successful GRaNIE analysis by the authors of the package) or by some biological effects (either a possible biological relevance of negative correlations between peak accessibility and gene expression, which GRaNIE authors dismiss, or a possible colocalisation of peaks and genes that are strongly positively regulated with peaks and genes that are strongly negatively regulated, so that genes under both modes of regulation would be found in any given vicinity around a peak; this possibility is in line with my previous failures to establish a working background and implies that long-range regulation that skips non-target genes is predominant).

I tried to filter by the minimum mean normalised exression of 5 (default in GRaNIE) or 20, but then the QC becomes worse.

## Analyse the predicted connections

Extract the predicted ("real") connections and adjust their raw p-values:

```{r}
grn_p1 = readRDS("../r_results/predict_correlated_expressed_gene_granie/grn_p1/grn_p1.rds")

grn_p2 = readRDS("../r_results/predict_correlated_expressed_gene_granie/grn_p2/grn_p2.rds")

grn_pM = readRDS("../r_results/predict_correlated_expressed_gene_granie/grn_pM/grn_pM.rds")

p1.conn = as.data.frame(grn_p1@connections$peak_genes[["0"]]) %>%
  mutate(padj = p.adjust(peak_gene.p_raw, method = "BH"))

p2.conn = as.data.frame(grn_p2@connections$peak_genes[["0"]]) %>%
  mutate(padj = p.adjust(peak_gene.p_raw, method = "BH"))

pM.conn = as.data.frame(grn_pM@connections$peak_genes[["0"]]) %>%
  mutate(padj = p.adjust(peak_gene.p_raw, method = "BH"))
```

Annotate NFIA-dependent regions in all the predicted connections:

```{r}
p1.11.7.dep = readRDS(paste0("../r_results/diff_accessibility/tables/p1_D11_vs_D7_dep", 
                             "_fdr", fdr, "_min-l2fc", min.l2fc, "_min-baseMean", min.baseMean, ".rds"))

p2.11.7.dep = readRDS(paste0("../r_results/diff_accessibility/tables/p2_D11_vs_D7_dep", 
                             "_fdr", fdr, "_min-l2fc", min.l2fc, "_min-baseMean", min.baseMean, ".rds"))

pM.11.7.dep = readRDS(paste0("../r_results/diff_accessibility/tables/pM_D11_vs_D7_dep", 
                             "_fdr", fdr, "_min-l2fc", min.l2fc, "_min-baseMean", min.baseMean, ".rds"))

p1.regions.annot = read_delim(file = "../results/select_samples/featureCounts_WT_D7_p1_vs_WT_D11_p1.tsv",
                              delim = "\t",
                              col_names = TRUE,
                              col_select = c(Geneid,
                                             Chr,
                                             Start,
                                             End,
                                             Strand,
                                             Length)) %>%
  mutate(peak.ID = paste0(Chr, ":", Start, "-", End))

p2.regions.annot = read_delim(file = "../results/select_samples/featureCounts_WT_D7_p2_vs_WT_D11_p2.tsv",
                              delim = "\t",
                              col_names = TRUE,
                              col_select = c(Geneid,
                                             Chr,
                                             Start,
                                             End,
                                             Strand,
                                             Length)) %>%
  mutate(peak.ID = paste0(Chr, ":", Start, "-", End))

pM.regions.annot = read_delim(file = "../results/select_samples/featureCounts_WT_D7_pM_vs_WT_D11_pM.tsv",
                              delim = "\t",
                              col_names = TRUE,
                              col_select = c(Geneid,
                                             Chr,
                                             Start,
                                             End,
                                             Strand,
                                             Length)) %>%
  mutate(peak.ID = paste0(Chr, ":", Start, "-", End))

p1.dep.annot = p1.regions.annot %>%
  filter(Geneid %in% p1.11.7.dep)

p2.dep.annot = p2.regions.annot %>%
  filter(Geneid %in% p2.11.7.dep)

pM.dep.annot = pM.regions.annot %>%
  filter(Geneid %in% pM.11.7.dep)

p1.conn %<>%
  mutate(is_dependent = (peak.ID %in% p1.dep.annot$peak.ID))

p2.conn %<>%
  mutate(is_dependent = (peak.ID %in% p2.dep.annot$peak.ID))

pM.conn %<>%
  mutate(is_dependent = (peak.ID %in% pM.dep.annot$peak.ID))
```

Annotate NFIA elements in all the predicted connections:

```{r}
p1.nfia.df = readRDS(paste0("../r_results/select_diff_regions/", 
                            "p1_dep_nfia_ranges_with_sites_plus-strand_80pc_match-fdr_", fdr.matches, 
                            "_in-regions-of_fdr", fdr, "_min-l2fc", min.l2fc, "_min-baseMean", min.baseMean, ".rds")) %>%
  as.data.frame() %>%
  mutate(peak.ID = paste0(seqnames, ":", start, "-", end))

p2.nfia.df = readRDS(paste0("../r_results/select_diff_regions/", 
                            "p2_dep_nfia_ranges_with_sites_plus-strand_80pc_match-fdr_", fdr.matches, 
                            "_in-regions-of_fdr", fdr, "_min-l2fc", min.l2fc, "_min-baseMean", min.baseMean, ".rds")) %>%
  as.data.frame() %>%
  mutate(peak.ID = paste0(seqnames, ":", start, "-", end))

pM.nfia.df = readRDS(paste0("../r_results/select_diff_regions/", 
                            "pM_dep_nfia_ranges_with_sites_plus-strand_80pc_match-fdr_", fdr.matches, 
                            "_in-regions-of_fdr", fdr, "_min-l2fc", min.l2fc, "_min-baseMean", min.baseMean, ".rds")) %>%
  as.data.frame() %>%
  mutate(peak.ID = paste0(seqnames, ":", start, "-", end))

p1.conn %<>%
  mutate(is_element = (peak.ID %in% p1.nfia.df$peak.ID))

p2.conn %<>%
  mutate(is_element = (peak.ID %in% p2.nfia.df$peak.ID))

pM.conn %<>%
  mutate(is_element = (peak.ID %in% pM.nfia.df$peak.ID))
```

Annotate NFIA-dependent genes in all the predicted pairs:

```{r}
p1.ref.genes = readRDS("../r_results/diff_expression/tables/p1_ref_genes.rds")

p2.ref.genes = readRDS("../r_results/diff_expression/tables/p2_ref_genes.rds")

pM.ref.genes = readRDS("../r_results/diff_expression/tables/pM_ref_genes.rds")

p1.ref.genes.annot = gene_id_name %>%
  filter(gene_name %in% p1.ref.genes)

p2.ref.genes.annot = gene_id_name %>%
  filter(gene_name %in% p2.ref.genes)

pM.ref.genes.annot = gene_id_name %>%
  filter(gene_name %in% pM.ref.genes)

p1.conn %<>%
  mutate(is_dependent_gene = (gene.ENSEMBL %in% p1.ref.genes.annot$gene_id))

p2.conn %<>%
  mutate(is_dependent_gene = (gene.ENSEMBL %in% p2.ref.genes.annot$gene_id))

pM.conn %<>%
  mutate(is_dependent_gene = (gene.ENSEMBL %in% pM.ref.genes.annot$gene_id))
```

Annotate genes in all the predicted pairs with gene names:

```{r}
p1.conn %<>%
  left_join(gene_id_name,
            by = c("gene.ENSEMBL" = "gene_id"))

p2.conn %<>%
  left_join(gene_id_name,
            by = c("gene.ENSEMBL" = "gene_id"))

pM.conn %<>%
  left_join(gene_id_name,
            by = c("gene.ENSEMBL" = "gene_id"))
```

Annotate regions from all the predicted pairs with region IDs:

```{r}
p1.conn %<>%
  left_join(p1.regions.annot %>%
              dplyr::select(Geneid,
                            peak.ID) %>%
              dplyr::rename("RegionID" = "Geneid"),
            by = c("peak.ID" = "peak.ID"))

p2.conn %<>%
  left_join(p2.regions.annot %>%
              dplyr::select(Geneid,
                            peak.ID) %>%
              dplyr::rename("RegionID" = "Geneid"),
            by = c("peak.ID" = "peak.ID"))

pM.conn %<>%
  left_join(pM.regions.annot %>%
              dplyr::select(Geneid,
                            peak.ID) %>%
              dplyr::rename("RegionID" = "Geneid"),
            by = c("peak.ID" = "peak.ID"))
```

Save the final tables of all predicted pairs:

```{r}
saveRDS(p1.conn,
        "../r_results/predict_correlated_expressed_gene_granie/tables/p1_pairs_all.rds")

saveRDS(p2.conn,
        "../r_results/predict_correlated_expressed_gene_granie/tables/p2_pairs_all.rds")

saveRDS(pM.conn,
        "../r_results/predict_correlated_expressed_gene_granie/tables/pM_pairs_all.rds")
```

## Explore predicted region-gene pairs

Form the target sets of region-gene pairs:

```{r}
p1.conn = readRDS("../r_results/predict_correlated_expressed_gene_granie/tables/p1_pairs_all.rds")

p2.conn = readRDS("../r_results/predict_correlated_expressed_gene_granie/tables/p2_pairs_all.rds")

pM.conn = readRDS("../r_results/predict_correlated_expressed_gene_granie/tables/pM_pairs_all.rds")

p1.conn.dep = p1.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_dependent)

p2.conn.dep = p2.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_dependent)

pM.conn.dep = pM.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_dependent)

p1.conn.element = p1.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_element)

p2.conn.element = p2.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_element)

pM.conn.element = pM.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_element)

p1.conn.dep.dep = p1.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_dependent & is_dependent_gene)

p2.conn.dep.dep = p2.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_dependent & is_dependent_gene)

pM.conn.dep.dep = pM.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_dependent & is_dependent_gene)

p1.conn.element.dep = p1.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_element & is_dependent_gene)

p2.conn.element.dep = p2.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_element & is_dependent_gene)

pM.conn.element.dep = pM.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_element & is_dependent_gene)

# ...

write.table(p1.conn.element.dep %>%
              dplyr::rename("region_id" = "RegionID",
                            "region_coord" = "peak.ID",
                            "gene_id" = "gene.ENSEMBL",
                            "region_gene_distance" = "peak_gene.distance",
                            "region_gene_correlation" = "peak_gene.r",
                            "region_gene_raw_pvalue" = "peak_gene.p_raw",
                            "region_gene_adj_pvalue" = "padj") %>%
              dplyr::select(region_id,
                            region_coord,
                            gene_id,
                            gene_name,
                            region_gene_distance,
                            region_gene_correlation,
                            region_gene_raw_pvalue,
                            region_gene_adj_pvalue,
                            -is_dependent,
                            -is_element,
                            -is_dependent_gene),
            "../r_results/predict_correlated_expressed_gene_granie/tables/p1_conn_element-dependent_gene.tsv",
            row.names = F,
            sep = "\t",
            quote = F)

write.table(p2.conn.element.dep %>%
              dplyr::rename("region_id" = "RegionID",
                            "region_coord" = "peak.ID",
                            "gene_id" = "gene.ENSEMBL",
                            "region_gene_distance" = "peak_gene.distance",
                            "region_gene_correlation" = "peak_gene.r",
                            "region_gene_raw_pvalue" = "peak_gene.p_raw",
                            "region_gene_adj_pvalue" = "padj") %>%
              dplyr::select(region_id,
                            region_coord,
                            gene_id,
                            gene_name,
                            region_gene_distance,
                            region_gene_correlation,
                            region_gene_raw_pvalue,
                            region_gene_adj_pvalue,
                            -is_dependent,
                            -is_element,
                            -is_dependent_gene),
            "../r_results/predict_correlated_expressed_gene_granie/tables/p2_conn_element-dependent_gene.tsv",
            row.names = F,
            sep = "\t",
            quote = F)

write.table(pM.conn.element.dep %>%
              dplyr::rename("region_id" = "RegionID",
                            "region_coord" = "peak.ID",
                            "gene_id" = "gene.ENSEMBL",
                            "region_gene_distance" = "peak_gene.distance",
                            "region_gene_correlation" = "peak_gene.r",
                            "region_gene_raw_pvalue" = "peak_gene.p_raw",
                            "region_gene_adj_pvalue" = "padj") %>%
              dplyr::select(region_id,
                            region_coord,
                            gene_id,
                            gene_name,
                            region_gene_distance,
                            region_gene_correlation,
                            region_gene_raw_pvalue,
                            region_gene_adj_pvalue,
                            -is_dependent,
                            -is_element,
                            -is_dependent_gene),
            "../r_results/predict_correlated_expressed_gene_granie/tables/pM_conn_element-dependent_gene.tsv",
            row.names = F,
            sep = "\t",
            quote = F)
```

Summarise the predicted region-gene pairs:

```{r}
cat("p1:\n")

cat("The number of significant region-gene pairs with NFIA-dependent regions:", nrow(p1.conn.dep), "\n")

cat("The number of significant region-gene pairs with NFIA elements:", nrow(p1.conn.element), "\n")

cat("The number of significant region-gene pairs with NFIA-dependent regions and genes:", nrow(p1.conn.dep.dep), "\n")

cat("The number of significant region-gene pairs with NFIA elements and NFIA-dependent genes:", nrow(p1.conn.element.dep), "\n")

cat("p2:\n")

cat("The number of significant region-gene pairs with NFIA-dependent regions:", nrow(p2.conn.dep), "\n")

cat("The number of significant region-gene pairs with NFIA elements:", nrow(p2.conn.element), "\n")

cat("The number of significant region-gene pairs with NFIA-dependent regions and genes:", nrow(p2.conn.dep.dep), "\n")

cat("The number of significant region-gene pairs with NFIA elements and NFIA-dependent genes:", nrow(p2.conn.element.dep), "\n")

cat("pM:\n")

cat("The number of significant region-gene pairs with NFIA-dependent regions:", nrow(pM.conn.dep), "\n")

cat("The number of significant region-gene pairs with NFIA elements:", nrow(pM.conn.element), "\n")

cat("The number of significant region-gene pairs with NFIA-dependent regions and genes:", nrow(pM.conn.dep.dep), "\n")

cat("The number of significant region-gene pairs with NFIA elements and NFIA-dependent genes:", nrow(pM.conn.element.dep), "\n")
```

Additionally, save the tables of significant NFIA element -- NFIA-dependent gene pairs as RDS objects:

```{r}
saveRDS(p1.conn.element.dep,
        "../r_results/predict_correlated_expressed_gene_granie/tables/p1_pairs_nfia-element_nfia-dep-gene.rds")

saveRDS(p2.conn.element.dep,
        "../r_results/predict_correlated_expressed_gene_granie/tables/p2_pairs_nfia-element_nfia-dep-gene.rds")

saveRDS(pM.conn.element.dep,
        "../r_results/predict_correlated_expressed_gene_granie/tables/pM_pairs_nfia-element_nfia-dep-gene.rds")
```

There is only one significant NFIA element -- NFIA-dependent gene pair in p1:

```{r}
p1.conn.element.dep %>%
  dplyr::select(peak.ID,
                RegionID,
                gene.ENSEMBL,
                gene_name,
                peak_gene.distance,
                peak_gene.r,
                padj)
```

It includes the gene Aldoc (Aldolase, Fructose-Bisphosphate C) which is an astrocyte marker (along with many other brain cell types, including some other types of glia), according to the CellMarker 2.0 database ([Hu et al., 2022](https://academic.oup.com/nar/article/51/D1/D870/6775381)) and which, in human, [is expressed almost exclusively in the brain](https://gtexportal.org/home/gene/ALDOC). Its significant connection to the Interval_33430 NFIA element (chr11:78152202-78154210) is also present in p2 and pM:

```{r}
p2.conn.element.dep %>%
  filter(RegionID == "Interval_33430") %>%
  dplyr::select(peak.ID,
                RegionID,
                gene.ENSEMBL,
                gene_name,
                peak_gene.distance,
                peak_gene.r,
                padj)

pM.conn.element.dep %>%
  filter(RegionID == "Interval_33430") %>%
  dplyr::select(peak.ID,
                RegionID,
                gene.ENSEMBL,
                gene_name,
                peak_gene.distance,
                peak_gene.r,
                padj)
```

Therefore, it is reasonable to count the connection as real.

As there is only one significant NFIA element -- NFIA-dependent gene pair in p1, we will compare only p2 and pM.

Stratify the significant NFIA element -- NFIA-dependent gene pairs in p2 and pMN into positively and negatively correlated:

```{r}
cat("The numbers of positively/negatively correlated significant pairs in p2:", 
    nrow(p2.conn.element.dep %>%
      filter(peak_gene.r > 0)), "/",
    nrow(p2.conn.element.dep %>%
      filter(peak_gene.r <= 0)), "\n")

cat("The numbers of positively/negatively correlated significant pairs in pM:", 
    nrow(pM.conn.element.dep %>%
      filter(peak_gene.r > 0)), "/",
    nrow(pM.conn.element.dep %>%
      filter(peak_gene.r <= 0)), "\n")
```

The vast majority of the pairs are correlated positively, which means that both a region and a gene are upregulated in WT-D11 vs WT-D7 but are downregulated in MUT-D11 vs MUT-D7. Only one region-gene pair in pMN is negatively correlated:

```{r}
pM.conn.element.dep %>%
    filter(peak_gene.r <= 0) %>%
    dplyr::select(peak.ID,
                RegionID,
                gene.ENSEMBL,
                gene_name,
                peak_gene.distance,
                peak_gene.r,
                padj)
```

which, by the design of my selection procedures for NFIA-dependent regions (and hence, for NFIA elements) and for NFIA-dependent genes, means that the region is upregulated but the gene is downregulated. This is because I select only the regions that are upregulated in WT-D11 vs WT-D7 (and are downregulated in MUT-D11 vs WT-D11) but I select both up- and downregulated genes in WT-D11 vs WT-D7 (with the opposite regulation in MUT-D11 vs WT-D11). Therefore, the negative correlation could either represent a repressive action of NFIA bound at that particular enhancer towards that particular gene or be just a spurious association not representing regulation, because in the case of transcription repression, both the gene and the enhancer region would likely become downregulated and so the region would not be selected as NFIA-dependent in the first place (for which it would need to be differentially upregulated instead).

Next, find significant NFIA element -- NFIA dependent gene pairs in one domain that are not present (even as insignificant) in the other domain (due to the filtering by the mean normalized levels of the chromatin accessibility and gene expression):

```{r}
p2.conn.element.dep = readRDS("../r_results/predict_correlated_expressed_gene_granie/tables/p2_pairs_nfia-element_nfia-dep-gene.rds")

pM.conn.element.dep = readRDS("../r_results/predict_correlated_expressed_gene_granie/tables/pM_pairs_nfia-element_nfia-dep-gene.rds")

p2.conn = readRDS("../r_results/predict_correlated_expressed_gene_granie/tables/p2_pairs_all.rds")

pM.conn = readRDS("../r_results/predict_correlated_expressed_gene_granie/tables/pM_pairs_all.rds")

pM.conn.ids = pM.conn %>%
  mutate(gene_region_id = paste(gene.ENSEMBL, RegionID, sep = "_")) %>%
  pull(gene_region_id)

p2.specific.no.pM = p2.conn.element.dep %>%
  mutate(gene_region_id = paste(gene.ENSEMBL, RegionID, sep = "_")) %>%
  filter(!gene_region_id %in% pM.conn.ids)

p2.specific.no.pM.pairids = p2.specific.no.pM %>%
  mutate(pairID = paste0(RegionID, "_", gene.ENSEMBL)) %>%
  pull(pairID)

p2.specific.no.pM %>%
  dplyr::select(peak.ID,
              RegionID,
              gene.ENSEMBL,
              gene_name,
              peak_gene.distance,
              peak_gene.r,
              padj)

p2.conn.ids = p2.conn %>%
  mutate(gene_region_id = paste(gene.ENSEMBL, RegionID, sep = "_")) %>%
  pull(gene_region_id)

pM.specific.no.p2 = pM.conn.element.dep %>%
  mutate(gene_region_id = paste(gene.ENSEMBL, RegionID, sep = "_")) %>%
  filter(!gene_region_id %in% p2.conn.ids)

pM.specific.no.p2.pairids = pM.specific.no.p2 %>%
  mutate(pairID = paste0(RegionID, "_", gene.ENSEMBL)) %>%
  pull(pairID)

pM.specific.no.p2 %>%
  dplyr::select(peak.ID,
              RegionID,
              gene.ENSEMBL,
              gene_name,
              peak_gene.distance,
              peak_gene.r,
              padj)
```

The two p2-specific gene-region pairs that are not present among the pM pairs both contain the *Actg2* gene (Actin Gamma 2, Smooth Muscle). Looks irrelevant to gliogenesis, unless it plays a role in cell motility during the neural tube formation. *Actg2* is not a marker of any brain cell type, according to the CellMarker 2.0 database.

One of the two pM-specific gene-region pairs that are not present among the p2 pairs includes the *Cntnap3* gene, Contactin Associated Protein Family Member 3, whose product belongs to the NCP protein family and hence may participate in neuron-glia interactions, according to the [NCBI Gene Summary](https://www.ncbi.nlm.nih.gov/gene/79937#summary). However, it is not a marker of any cell type, according to the CellMarker database. This gene-region pair looks relevant, but because the neuron-glia interactions could be important for the gliogenesis in any of the three domains (p1, p2 and pM), I would need to check if this pair was just a near miss of the set gene expression or region accessibility cutoff in p2 and p1 (in which case it may not be reasonable to classify it as p2-specific). The other pair includes the *Prr18* gene, Proline Rich 18, whose relevance is unclear as it is not well characterised (according to [GeneCards](https://www.genecards.org/cgi-bin/carddisp.pl?gene=PRR18)). Also, *Prr18* is not a brain cell type marker, according to the CellMarker 2.0 database.

Next, call p2-specific and pM-specific pairs of NFIA-dependent genes and NFIA elements: they should also be present in the opposite domain (pass the expression and accessibility cutoffs) but either the gene, or the region, or both are not NFIA-dependent, or, alternatively, both are dependent but the correlation between them is insignificant:

```{r}
p2.conn.element.dep %<>%
  mutate(pairID = paste0(RegionID, "_", gene.ENSEMBL))

pM.conn.element.dep %<>%
  mutate(pairID = paste0(RegionID, "_", gene.ENSEMBL))

p2.conn.element.dep.ids = p2.conn.element.dep$pairID

pM.conn.element.dep.ids = pM.conn.element.dep$pairID

conn.element.dep.ids.shared = intersect(p2.conn.element.dep.ids,
                                        pM.conn.element.dep.ids)

p2.conn.element.dep.ids.specific = setdiff(p2.conn.element.dep.ids,
                                           pM.conn.element.dep.ids)

pM.conn.element.dep.ids.specific = setdiff(pM.conn.element.dep.ids,
                                           p2.conn.element.dep.ids)

p2.conn.element.dep.shared = p2.conn.element.dep %>%
  filter(pairID %in% conn.element.dep.ids.shared)

pM.conn.element.dep.shared = pM.conn.element.dep %>%
  filter(pairID %in% conn.element.dep.ids.shared)

p2.conn.element.dep.specific = p2.conn.element.dep %>%
  filter(pairID %in% p2.conn.element.dep.ids.specific) %>%
  filter(!pairID %in% p2.specific.no.pM.pairids)

pM.conn.element.dep.specific = pM.conn.element.dep %>%
  filter(pairID %in% pM.conn.element.dep.ids.specific) %>%
  filter(!pairID %in% pM.specific.no.p2.pairids)

saveRDS(p2.conn.element.dep.shared,
        "../r_results/predict_correlated_expressed_gene_granie/tables/p2_pairs_nfia-element_nfia-dep-gene_shared.rds")

saveRDS(pM.conn.element.dep.shared,
        "../r_results/predict_correlated_expressed_gene_granie/tables/pM_pairs_nfia-element_nfia-dep-gene_shared.rds")

saveRDS(p2.conn.element.dep.specific,
        "../r_results/predict_correlated_expressed_gene_granie/tables/p2_pairs_nfia-element_nfia-dep-gene_specific.rds")

saveRDS(pM.conn.element.dep.specific,
        "../r_results/predict_correlated_expressed_gene_granie/tables/pM_pairs_nfia-element_nfia-dep-gene_specific.rds")
```

Numbers of shared and domain-specific pairs:

```{r}
cat("The number of shared pairs:", length(conn.element.dep.ids.shared), "\n")

cat("The number of p2-specific pairs:", nrow(p2.conn.element.dep.specific), "\n")

cat("The number of pM-specific pairs:", nrow(pM.conn.element.dep.specific), "\n")
```

Compare correlation coefficients of p2-specific pairs in p2 and pM to find if these pairs are really specific for p2:

```{r}
p2.conn.element.dep.pM.comm = p2.conn.element.dep.specific %>%
  dplyr::select(-peak_gene.p_raw,
                -is_dependent,
                -is_element,
                -is_dependent_gene) %>%
  dplyr::rename("region_gene_correlation_p2" = "peak_gene.r",
                "region_gene_adj_pvalue_p2" = "padj",
                "region_gene_distance" = "peak_gene.distance",
                "region_id" = "RegionID",
                "region_coord" = "peak.ID",
                "gene_id" = "gene.ENSEMBL") %>%
  left_join(pM.conn %>%
              mutate(pairID = paste0(RegionID, "_", gene.ENSEMBL)) %>%
              dplyr::select(-gene.ENSEMBL,
                            -RegionID,
                            -peak.ID,
                            -peak_gene.distance,
                            -gene_name,
                            -peak_gene.p_raw) %>%
              dplyr::rename("region_gene_correlation_pM" = "peak_gene.r",
                            "region_gene_adj_pvalue_pM" = "padj",
                            "is_dependent_region_pM" = "is_dependent",
                            "is_element_pM" = "is_element",
                            "is_dependent_gene_pM" = "is_dependent_gene"),
            by = c("pairID" = "pairID")) %>%
  mutate(pM_sign = (region_gene_adj_pvalue_pM < fdr.pairs)) %>%
  mutate(pM_nfia = (is_dependent_region_pM & is_element_pM & is_dependent_gene_pM)) %>%
  dplyr::select(region_id,
                region_coord,
                gene_id,
                gene_name,
                region_gene_distance,
                region_gene_correlation_p2,
                region_gene_adj_pvalue_p2,
                region_gene_correlation_pM,
                region_gene_adj_pvalue_pM,
                pM_sign,
                pM_nfia) %>%
  mutate(pair_category = ifelse(pM_sign & pM_nfia, "Error",
                                ifelse(pM_sign & !pM_nfia, "pM-significant, NFIA-independent",
                                       ifelse(!pM_sign & pM_nfia, "pM-insignificant, NFIA-dependent",
                                              "pM-insignificant, NFIA-independent"))))

write.table(p2.conn.element.dep.pM.comm,
            "../r_results/predict_correlated_expressed_gene_granie/tables/p2_specific_common_with_pM.tsv",
            sep = "\t",
            row.names = F,
            quote = F)

saveRDS(p2.conn.element.dep.pM.comm,
        "../r_results/predict_correlated_expressed_gene_granie/tables/p2_specific_common_with_pM.rds")

p = p2.conn.element.dep.pM.comm %>%
  ggplot(aes(x = region_gene_correlation_p2,
             y = region_gene_correlation_pM,
             colour = pair_category)) +
    geom_point() +
    geom_abline(slope = 1, intercept = 0) +
    lims(x = c(0, 1), y = c(0, 1)) +
    theme_classic()

ggsave("../r_results/predict_correlated_expressed_gene_granie/plots/p2_specific_common_with_pM.pdf",
       p)

p
```

The p2-specific pairs fall into three categories:

1) pM-significant, NFIA-independent: These pairs are significant in pM, as well as in p2, but in pM they are not strictly "NFIA element -- NFIA-dependent gene" pairs, meaning that either the region is not NFIA element, or not even NFIA-dependent, or the gene is not NFIA-dependent, or neither the region, nor the gene are NFIA element / dependent.

The correlation coefficients of the 8 pairs from this category are on par in pM and p2, which means that the correlations of these regions and genes may not depend on NFIA regulation at all. Hence, I would not consider these p2-specific.

2) pM-insignificant, NFIA-dependent: These are pairs of an NFIA element and an NFIA-dependent gene in pM that are not correlated high enough to be deemed significant in pM. 

This category includes only one region-gene pair, and I would not consider it p2-specific, because despite the low correlation, the NFIA-dependent regulation in pM still may be real.

3) pM-insignificant, NFIA-independent: These are pairs that do not depend on NFIA (see the first category for the exact definition of an "NFIA-independent" pair) and are not correlated high enough to be deemed significant in pM. 

These pairs are good candidates for p2-specificity. However, the majority of them are still very highly correlated in pM, which means that their correlation may not depend on NFIA regulation.

In total, I would consider as p2-specific only the two pM-insignificant NFIA-independent pairs with the lowest correlation coefficients in pM, as they are unlikely to be NFIA-regulated there:


```{r}
p2.conn.element.dep.pM.comm %>%
  arrange(region_gene_correlation_pM) %>%
  head(2)
```

These associations involve only *Ednra* (endothelin-1 receptor), which [regulates vasoconstriction](https://www.genecards.org/cgi-bin/carddisp.pl?gene=EDNRA&keywords=Ednra) and takes part in nerual crest development ([Bonano et al., 2008](https://www.sciencedirect.com/science/article/pii/S0012160608011172)). However, I did not find any known direct roles of *Ednra* in gliogenesis or differentiated glia. Also, this gene is not a glial cell marker, according to the CellMarker 2.0 database.

Next, compare correlation coefficients of pM-specific pairs (excluding the significant negatively correlated one, as it is not interpretable) in pM and p2 to find if these pairs are really specific for pM:

```{r}
pM.conn.element.dep.p2.comm = pM.conn.element.dep.specific %>%
  dplyr::select(-peak_gene.p_raw,
                -is_dependent,
                -is_element,
                -is_dependent_gene) %>%
  dplyr::rename("region_gene_correlation_pM" = "peak_gene.r",
                "region_gene_adj_pvalue_pM" = "padj",
                "region_gene_distance" = "peak_gene.distance",
                "region_id" = "RegionID",
                "region_coord" = "peak.ID",
                "gene_id" = "gene.ENSEMBL") %>%
  left_join(p2.conn %>%
              mutate(pairID = paste0(RegionID, "_", gene.ENSEMBL)) %>%
              dplyr::select(-gene.ENSEMBL,
                            -RegionID,
                            -peak.ID,
                            -peak_gene.distance,
                            -gene_name,
                            -peak_gene.p_raw) %>%
              dplyr::rename("region_gene_correlation_p2" = "peak_gene.r",
                            "region_gene_adj_pvalue_p2" = "padj",
                            "is_dependent_region_p2" = "is_dependent",
                            "is_element_p2" = "is_element",
                            "is_dependent_gene_p2" = "is_dependent_gene"),
            by = c("pairID" = "pairID")) %>%
  filter(region_gene_correlation_pM >= 0) %>%
  mutate(p2_sign = (region_gene_adj_pvalue_p2 < fdr.pairs)) %>%
  mutate(p2_nfia = (is_dependent_region_p2 & is_element_p2 & is_dependent_gene_p2)) %>%
  dplyr::select(region_id,
                region_coord,
                gene_id,
                gene_name,
                region_gene_distance,
                region_gene_correlation_pM,
                region_gene_adj_pvalue_pM,
                region_gene_correlation_p2,
                region_gene_adj_pvalue_p2,
                p2_sign,
                p2_nfia) %>%
  mutate(pair_category = ifelse(p2_sign & p2_nfia, "Error",
                                ifelse(p2_sign & !p2_nfia, "p2-significant, NFIA-independent",
                                       ifelse(!p2_sign & p2_nfia, "p2-insignificant, NFIA-dependent",
                                              "p2-insignificant, NFIA-independent"))))

write.table(pM.conn.element.dep.p2.comm,
            "../r_results/predict_correlated_expressed_gene_granie/tables/pM_specific_common_with_p2.tsv",
            sep = "\t",
            row.names = F,
            quote = F)

saveRDS(pM.conn.element.dep.p2.comm,
        "../r_results/predict_correlated_expressed_gene_granie/tables/pM_specific_common_with_p2.rds")

p = pM.conn.element.dep.p2.comm %>%
  ggplot(aes(x = region_gene_correlation_pM,
             y = region_gene_correlation_p2,
             colour = pair_category)) +
    geom_point() +
    geom_abline(slope = 1, intercept = 0) +
    geom_hline(yintercept = 0) + 
    lims(x = c(0, 1), y = c(-0.5, 1)) +
    theme_classic()

ggsave("../r_results/predict_correlated_expressed_gene_granie/plots/pM_specific_common_with_p2.pdf",
       p)

p
```

Following the same logic as with p2-specific pairs, I would consider as truly pM-specific the two pairs with the lowest (negative) correlation coefficient in p2, as they are NFIA-independent and insignificant in this domain and their negative correlation coefficients in p2 suggest that there is no regulatory association between the respective genes and regions in this domain:

```{r}
pM.conn.element.dep.p2.comm %>%
  arrange(region_gene_correlation_p2) %>%
  head(2)
```

These pairs include genes Gas1 and Cnp. Gas1 does not have direct connections to glia, although it is expressed in the central nervous system ([Zarco et al., 2013](https://journals.sagepub.com/doi/10.1369/0022155413498088); [Quezada-Ramirez et al., 2018](https://www.sciencedirect.com/science/article/pii/S0014482718300466); [Jin et al., 2014](https://www.pnas.org/doi/10.1073/pnas.1418629112)), while Cnp facilitates axon-glia interactions ([Rasband et al., 2005](https://onlinelibrary.wiley.com/doi/full/10.1002/glia.20165)) and is an oligodendrocyte marker, according to the [CellMarker 2.0](http://117.50.127.228/CellMarker/CellMarkerSearch.jsp?quickSearchInfo=CNP&index_key=2#framekuang) database.

Finally, consider NFIA-dependent gene-NFIA element pairs that are significant in both p2 and pM:

```{r}
p2M.conn.element.dep.shared = p2.conn.element.dep.shared %>%
  dplyr::select(RegionID,
                peak.ID,
                gene.ENSEMBL,
                gene_name,
                peak_gene.distance,
                peak_gene.r,
                padj,
                pairID,
                -peak_gene.p_raw,
                -is_dependent,
                -is_element,
                -is_dependent_gene,) %>%
  dplyr::rename("region_id" = "RegionID",
                "region_coord" = "peak.ID",
                "gene_id" = "gene.ENSEMBL",
                "region_gene_distance" = "peak_gene.distance",
                "region_gene_correlation_p2" = "peak_gene.r",
                "region_gene_adj_pvalue_p2" = "padj") %>%
  left_join(pM.conn.element.dep.shared %>%
              dplyr::select(peak_gene.r,
                            padj,
                            pairID) %>%
              dplyr::rename("region_gene_correlation_pM" = "peak_gene.r",
                            "region_gene_adj_pvalue_pM" = "padj"),
            by = c("pairID" = "pairID")) %>%
  dplyr::select(region_id,
                region_coord,
                gene_id,
                gene_name,
                region_gene_distance,
                region_gene_correlation_p2,
                region_gene_adj_pvalue_p2,
                region_gene_correlation_pM,
                region_gene_adj_pvalue_pM)

write.table(p2M.conn.element.dep.shared,
            "../r_results/predict_correlated_expressed_gene_granie/tables/p2M_shared.tsv",
            sep = "\t",
            row.names = F,
            quote = F)

saveRDS(p2M.conn.element.dep.shared,
        "../r_results/predict_correlated_expressed_gene_granie/tables/p2M_shared.rds")

p = p2M.conn.element.dep.shared %>%
  ggplot(aes(x = region_gene_correlation_p2,
             y = region_gene_correlation_pM)) +
    geom_point() +
    geom_abline(slope = 1, intercept = 0) +
    lims(x = c(0, 1), y = c(0, 1)) +
    theme_classic()

ggsave("../r_results/predict_correlated_expressed_gene_granie/plots/p2M_shared.pdf",
       p)

p
```

In both domains the shared NFIA element -- NFIA-dependent gene pairs have high correlation coefficients, as expected. However, the vast majority of the pairs have higher coefficients in pM. The pairs are as follows:

```{r}
p2M.conn.element.dep.shared
```

They involve the following genes:

```{r}
p2M.conn.element.dep.shared %>%
  pull(gene_name) %>%
  sort() %>%
  unique()
```

1) *Aldh1l1* is an astrocyte marker (along with some other glial cell types), according to the CellMarker 2.0 database. As ([Molofsky et al., 2013](https://onlinelibrary.wiley.com/doi/full/10.1002/glia.22538)) summarised, "Aldh1l1 is a folate metabolic enzyme identified by transcriptional profiling as a bona fide astrocyte marker ([Cahoy et al., 2008](https://www.jneurosci.org/content/28/1/264)) that does not colabel with markers of other mature cell types in postnatal brain and is broadly expressed in both fibrous and protoplasmic astrocytes ([Yang et al., 2010](https://onlinelibrary.wiley.com/doi/full/10.1002/glia.21089)). Aldh1l1-GFP is first detected in the spinal cord in radial glial precursors around the time of the neuron-glia switch at mE12.5, and generalizes thereafter to label parenchymal cells ([Anthony and Heintz, 2007](https://onlinelibrary.wiley.com/doi/10.1002/cne.21179)) which are astrocyte precursors ([Tien et al., 2012](https://journals.biologists.com/dev/article/139/14/2477/45171/Regulated-temporal-spatial-astrocyte-precursor); [Tsai et al., 2012](https://www.science.org/doi/10.1126/science.1222381))."

2) *Aldoc* is an astrocyte marker (along with many other brain cell types, including some other types of glia), according to the CellMarker 2.0 database. Additionally, it is the only significant region-gene pair shared among all the three domains, as it is the only significant pair in p1 (described above). *Aldoc* is highly expressed in follicullostellate cells and, at a lower level, in pituicytes ([Fletcher et al., 2022](https://onlinelibrary.wiley.com/doi/full/10.1002/glia.24267)). 

3) *Cbs* is an astrocyte marker, according to the CellMarker 2.0 database. According to ([Enokido et al., 2005](https://faseb.onlinelibrary.wiley.com/doi/full/10.1096/fj.05-3724fje)), "Immunohistochemical analysis revealed that CBS is preferentially expressed in cerebellar Bergmann glia and in astrocytes throughout the brain. At early developmental stages, CBS was expressed in neuroepithelial cells in the ventricular zone, but its expression changed to radial glial cells and then to astrocytes during the late embryonic and neonatal periods. CBS was most highly expressed in juvenile brain, and a striking induction was observed in cultured astrocytes in response to EGF, TGF-α, cAMP, and dexamethasone." 

4) *Csmd1* is a type I spiral ganglion neuron marker, according to the CellMarker 2.0 database. According to a recent single-nucleus study, this gene is uniquely expressed in non-myelinating Schwann cells that "ensheath the small sensory fibers" ([Yim et al., 2022](https://www.nature.com/articles/s41593-021-01005-1)).

5) *Klf15* is not a marker of any particular cell type, according to the CellMarker 2.0 database. Fu and colleagues established this gene as "sufficient for genesis of precocious GFAP-positive astrocytes in spinal cord explants" ([Fu et al., 2009](https://www.jneurosci.org/content/29/36/11399.full)), while Ohtsuka and colleagues have shown that "Klf15 is essential for the maintenance of neural stem cells in the VZ [ventricular zone]" ([Ohtsuka et al., 2011](https://academic.oup.com/stmcls/article/29/11/1817/6403704)).

6) *Mmd2* is an astrocyte marker (along with multiple ductal pancreatic cell), according to the CellMarker 2.0 database. It "perform[s] key migratory and metabolic roles during astro-gliogenesis" and is a target of Sox9 and Nfia ([Kang et al., 2012](https://www.sciencedirect.com/science/article/pii/S0896627312001420)).

7) *Rassf10* is not a marker of any particular cell type, according to the CellMarker 2.0 database. I also did not find anything connecting this gene to glia in literature.

8) *Slc27a1* is an astrocyte and olfactory ensheathing glia marker, according to the CellMarker 2.0 database. I did not find in literature anything more specific about this gene in connection to glia.

9) *Tagln2* is *not* a marker of any brain cell type, according to the CellMarker 2.0 database. However, as summarised in a recent publication by Drake and colleagues, "MT2A and TAGLN2 were identified in three separate papers as upregulated in astrocytes from SPMS NAWM, EAE cerebellum, EAE spinal cord, and several clusters from EAE astrocytes, although not in proinflammatory clusters ([Itoh et al., 2018](https://doi.org/10.1073/pnas.1716032115); [Waller et al., 2016](https://doi.org/10.1016/j.jneuroim.2016.09.010); [Wheeler et al., 2020](https://doi.org/10.1038/s41586-020-1999-0)). Tagln2 was also upregulated in EAE optic nerve ([Itoh et al., 2018](https://doi.org/10.1073/pnas.1716032115))" ([Drake et al., 2023](https://wires.onlinelibrary.wiley.com/doi/full/10.1002/wsbm.1594)).

10) *Thrsp* is a marker of neuronal stem cells and the type IC spiral ganglion neuron, according to the CellMarker 2.0 database. According to Hochgerner and colleagues, "Thrsp (also known as SPOT14) [is] a regulator of adult neurogenesis via lipid metabolism ([Knobloch et al., 2012](https://www.nature.com/articles/nature11689); [Knobloch et al., 2014](https://www.sciencedirect.com/science/article/pii/S2213671114002677)) that is expressed in the quiescent radial and nonradial cells that give rise to the neuronal lineage in adult mice" ([Hochgerner et al., 2018](https://www.nature.com/articles/s41593-017-0056-2)).

11) *Timp4* is *not* a marker of any brain cell type, according to the CellMarker 2.0 database. However, according to the work by Nuttall and co-authors, TIMP4 is preferentially expressed in microglia (along with monocytes), among the cells that they profiled ([Nuttall et al., 2007](https://onlinelibrary.wiley.com/doi/full/10.1002/glia.20478)). 

12) *Tmem176b* is a marker of astrocytes and the type II spiral ganglion neuron, along with many other cell types, according to the CellMarker 2.0 database. It is expressed in neonatal microglia ([Schmid et al., 2009](https://onlinelibrary.wiley.com/doi/full/10.1111/j.1471-4159.2009.05984.x)), and a particular subtype of Schwann cells ([Zhang et al., 2020](https://onlinelibrary.wiley.com/doi/full/10.1002/glia.23928)).

In total, all of these 12 genes, except for *Rassf10*, are expressed in various glial cells and, therefore, their differential expression in the gliogenesis is likely biologically relevant. Additionally, for a known glial marker gene *Mmd2* we predicted a new regulatory element Interval_159802 (chr5:142907480-142907712), ~360 kb downstream from the gene (previously, ([Kang et al., 2012](https://www.sciencedirect.com/science/article/pii/S0896627312001420)) found Sox9 and Nfia binding sites, likely in the proximal promoter of this gene ([Lenhard et al., 2012](https://www.nature.com/articles/nrg3163)), 800 bp upstream from the *Mmd2* TSS).
