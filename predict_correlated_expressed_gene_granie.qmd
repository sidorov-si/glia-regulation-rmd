---
title: "Transcription regulation in gliogenesis"
author: "Sviatoslav Sidorov"
format: html
editor: visual
---

## Load libraries

```{r}
library(GRaNIE)
library(dplyr)
library(stringr)
library(tibble)
library(magrittr)
library(DESeq2)
library(biomaRt)
library(readr)
```

## Define constants and helper functions

```{r}
# Define helper functions
source("helper_functions_granie.R")

# Min norm mean counts to filter genes and regions (peaks)
min.norm.rna.counts = 10 # 5, 20
min.norm.peak.counts = 10 # 5, 20

# Radius of region-gene assignment vicinities around regions
vicinity.radius = 500000 # bp

# Prefix of gene names to exclude from the analysis
genes.to.exclude = "ERCC-" # exclude spike-in control

# Parameters for choosing significantly regulated regions
fdr = 0.01
min.l2fc = 2 # Min log2(fold change)
min.baseMean = 100

# FDR for NFIA motif matches
fdr.matches = 0.05

# FDR for predicted region-gene pairs
fdr.pairs = 0.2
```

## Preprocess gene expression counts

Load gene expression raw counts, exclude the spike-in control and retain only WT samples from Day 7, 9 or 11:

```{r}
master_table_genes = assays(readRDS("../input/salmon.merged.gene_counts.rds"))$counts %>%
  rownames_to_column(var = "gene_name") %>%
  filter(!stringr::str_detect(gene_name, fixed(genes.to.exclude))) %>%
  column_to_rownames(var = "gene_name") %>%
  dplyr::select(all_of(names(.)[stringr::str_detect(names(.), "WT_D[179]+_")]))
```

Add Ensembl IDs to all genes and exclude genes without Ensembl IDs. Use Ensembl v102, as it is the last version of the Ensembl database whose dataset `mmusculus_gene_ensembl` is still based on the reference assembly GRCm38 which corresponds to the assembly mm10 used in the expression and chromatin accessibility quantification:

```{r}
gene_id_name = read.delim("../input/ensembl102_grcm38p6_gene_id_names.tsv",
                           header = F,
                           sep = "\t") %>%
  dplyr::rename("gene_id" = "V1",
                "gene_name" = "V2")

master_table_genes %<>%
  rownames_to_column(var = "gene_name") %>%
  left_join(gene_id_name,
            by = c("gene_name" = "gene_name")) %>%
  filter(!is.na(gene_id)) %>%
  dplyr::select(-gene_name) %>%
  dplyr::select(gene_id,
                all_of(names(.)[stringr::str_detect(names(.), "WT_D[179]+_")]))

# Some genes have more than one Ensembl ID, hence the warning.

# Table ../input/ensembl102_grcm38p6_gene_id_names.tsv was obtained using the following commands:

# ensembl = useEnsembl(biomart = "ensembl",
#                      dataset = "mmusculus_gene_ensembl",
#                      version = "102")
# 
# gene_id_name = getBM(attributes = c("ensembl_gene_id",
#                                     "external_gene_name"),
#                      mart = ensembl)
# 
# write.table(gene_id_name,
#             "../input/ensembl102_grcm38p6_gene_id_names.tsv",
#             quote = F,
#             sep = "\t",
#             row.names = F,
#             col.names = F)
```

Generate domain-specific gene expression tables with raw counts:

```{r}
p1_gene_expression = master_table_genes %>%
  dplyr::select(gene_id, 
                all_of(names(.)[stringr::str_detect(names(.), "p1")]))

p2_gene_expression = master_table_genes %>%
  dplyr::select(gene_id, 
                all_of(names(.)[stringr::str_detect(names(.), "p2")]))

pM_gene_expression = master_table_genes %>%
  dplyr::select(gene_id,
                all_of(names(.)[stringr::str_detect(names(.), "pM")]))
```

Unload the gene expression master table from memory:

```{r}
rm(master_table_genes)
```

## Preprocess region accessibility counts

Load raw accessibility counts, retain only WT samples from Day 7, 9 or 11 and create the region annotation:

```{r}
master_table_regions = read.delim(file = "../input/consensus_peaks.mRp.clN.featureCounts.txt",
                                  header = T,
                                  sep = "\t",
                                  skip = 1)

names(master_table_regions) = gsub(pattern = ".mLb.clN.bam", 
                                   replacement = "", 
                                   x = names(master_table_regions))

region_annot = master_table_regions %>%
  dplyr::select(Geneid,
                Chr,
                Start,
                End,
                Strand,
                Length)

master_table_regions %<>%
  mutate(region_id = paste0(Chr, ":", Start, "-", End)) %>%
  dplyr::select(region_id, 
                all_of(names(.)[stringr::str_detect(names(.), "WT_D[179]+_")]))
```

Generate domain-specific region accessibility tables with raw counts:

```{r}
p1_region_accessibility = master_table_regions %>%
  dplyr::select(region_id, 
                all_of(names(.)[stringr::str_detect(names(.), "p1")]))

p2_region_accessibility = master_table_regions %>%
  dplyr::select(region_id, 
                all_of(names(.)[stringr::str_detect(names(.), "p2")]))

pM_region_accessibility = master_table_regions %>%
  dplyr::select(region_id, 
                all_of(names(.)[stringr::str_detect(names(.), "pM")]))
```

Unload the region accessibility master table from memory:

```{r}
rm(master_table_regions)
```

## Create GRNs

Create domain-specific tables of sample metadata:

```{r}
sample_meta_p1 = generate_sample_meta(p1_gene_expression, p1_region_accessibility)

sample_meta_p2 = generate_sample_meta(p2_gene_expression, p2_region_accessibility)

sample_meta_pM = generate_sample_meta(pM_gene_expression, pM_region_accessibility)
```

Initialize GRNs:

```{r}
grn_p1 = initializeGRN(objectMetadata = list(domain = "p1"),
                       outputFolder = "../r_results/predict_correlated_expressed_gene_granie/grn_p1",
                       genomeAssembly = "mm10")

grn_p2 = initializeGRN(objectMetadata = list(domain = "p2"),
                       outputFolder = "../r_results/predict_correlated_expressed_gene_granie/grn_p2",
                       genomeAssembly = "mm10")

grn_pM = initializeGRN(objectMetadata = list(domain = "pM"),
                       outputFolder = "../r_results/predict_correlated_expressed_gene_granie/grn_pM",
                       genomeAssembly = "mm10")
```

Add data to GRNs (as of version 1.3.25, GRaNIE still does not allow a custom genome annotation, so it will use the latest version of the Ensembl annotation of the mouse genome):

```{r}
grn_p1 = addData(GRN = grn_p1,
                 counts_peaks = p1_region_accessibility,
                 normalization_peaks = "DESeq2_sizeFactors",
                 idColumn_peaks = "region_id",
                 counts_rna = p1_gene_expression,
                 normalization_rna = "limma_quantile",
                 idColumn_RNA = "gene_id",
                 sampleMetadata = sample_meta_p1,
                 forceRerun = T)

grn_p2 = addData(GRN = grn_p2,
                 counts_peaks = p2_region_accessibility,
                 normalization_peaks = "DESeq2_sizeFactors",
                 idColumn_peaks = "region_id",
                 counts_rna = p2_gene_expression,
                 normalization_rna = "limma_quantile",
                 idColumn_RNA = "gene_id",
                 sampleMetadata = sample_meta_p2,
                 forceRerun = T)

grn_pM = addData(GRN = grn_pM,
                 counts_peaks = pM_region_accessibility,
                 normalization_peaks = "DESeq2_sizeFactors",
                 idColumn_peaks = "region_id",
                 counts_rna = pM_gene_expression,
                 normalization_rna = "limma_quantile",
                 idColumn_RNA = "gene_id",
                 sampleMetadata = sample_meta_pM,
                 forceRerun = T)
```

PCA plot for gene expression:

```{r}
plotPCA_all(GRN = grn_p1,
            data = c("rna"),
            basenameOutput = "p1_pca",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Samples from Day 9 and Day 11 are mostly separated by PC2, while Day 7 is not separated by PC2 from Day 9 because of one sample (WT_D7_p1_NFIAn_R3) positioned together with samples from Day 9. However, this does not make biological sense, as on Day 7 the NFIA-dependent gliogenesis program is still inactive, and for the same reason the separation of the other two Day 7 samples from the rest makes sense. Therefore, to obtain a clear separation of Day 7 samples from Day 9 and 11 samples, I will remove the "outlier" sample (WT_D7_p1_NFIAn_R3).

PCA plot for region accessibility:

```{r}
plotPCA_all(GRN = grn_p1,
            data = c("peaks"),
            basenameOutput = "p1_pca",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Samples are very clearly grouped by the day and separated by PC1. Interestingly, the between-sample difference, compared to the between-day difference, is much smaller in region accessibility than in gene expression.

Remove sample WT_D7_p1_NFIAn_R3 from the p1 gene expression table, as discussed above:

```{r}
p1_gene_expression %<>% dplyr::select(-WT_D7_p1_NFIAn_R3)
```

Re-create the p1 GRN without the excluded sample:

```{r}
sample_meta_p1 = generate_sample_meta(p1_gene_expression, p1_region_accessibility)

grn_p1 = initializeGRN(objectMetadata = list(domain = "p1"),
                       outputFolder = "../r_results/predict_correlated_expressed_gene_granie/grn_p1",
                       genomeAssembly = "mm10")

grn_p1 = addData(GRN = grn_p1,
                 counts_peaks = p1_region_accessibility,
                 normalization_peaks = "DESeq2_sizeFactors",
                 idColumn_peaks = "region_id",
                 counts_rna = p1_gene_expression,
                 normalization_rna = "limma_quantile",
                 idColumn_RNA = "gene_id",
                 sampleMetadata = sample_meta_p1,
                 forceRerun = T)
```

Do PCA again for the p1 GRN without the excluded sample.

PCA plot for gene expression without the excluded sample:

```{r}
plotPCA_all(GRN = grn_p1,
            data = c("rna"),
            basenameOutput = "p1_pca_noout",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Now the two remaining samples from Day 7 are clearly separated by PC1 from the samples from Day 9 and Day 11 which, in turn, are not separated from each other. This makes sense.

PCA plot for region accessibility without the excluded sample:

```{r}
plotPCA_all(GRN = grn_p1,
            data = c("peaks"),
            basenameOutput = "p1_pca_noout",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

The clear separation of samples from Day 7, 9 and 11 did not change, which makes sense (as the excluded sample was not an outlier in the original PCA plot for peak accessibility).

Make a p2-specific PCA plot for RNA-seq samples:

```{r}
plotPCA_all(GRN = grn_p2,
            data = c("rna"),
            basenameOutput = "p2_pca",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Samples from Day 7, 9 and 11 are separated by PC2. All good. Of note, NFIA-negative samples from Day 9 group together with NFIA-positive samples from the same day and not to samples from Day 7. This fact suggests that NFIA-negative samples are not really "negative."

Make a p2-specific PCA plot for ATAC-seq samples:

```{r}
plotPCA_all(GRN = grn_p2,
            data = c("peaks"),
            basenameOutput = "p2_pca",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Samples from Day 7, 9 and 11 are separated by PC1. All good.

Make a pM-specific PCA plot for RNA-seq samples:

```{r}
plotPCA_all(GRN = grn_pM,
            data = c("rna"),
            basenameOutput = "pM_pca",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Samples from Day 7, 9 and 11 are separated by PC2, and samples from Day 7 are located further from the rest of the samples (along the PC2 axis) than Day 9 samples from Day 11 samples. All good. Again, NFIA-negative Day 9 samples group with NFIA-positive Day 9 samples and not with Day 7 samples, which again suggests that the "NFIA-negative" samples are actually not NFIA-negative.

Make a pM-specific PCA plot for ATAC-seq samples:

```{r}
plotPCA_all(GRN = grn_pM,
            data = c("peaks"),
            basenameOutput = "pM_pca",
            topn = 500,
            type = "normalized",
            removeFiltered = T,
            plotAsPDF = T,
            pages = c(5),
            forceRerun = T)
```

Samples from Day 7, 9 and 11 are separated by PC1. All good.

## Filter genes and peaks

Remove low-count and low-variability genes and peaks:

```{r}
grn_p1 = filterData(GRN = grn_p1,
                    minNormalizedMean_peaks = min.norm.peak.counts, 
                    minNormalizedMeanRNA = min.norm.rna.counts, 
                    forceRerun = T)

grn_p2 = filterData(GRN = grn_p2,
                    minNormalizedMean_peaks = min.norm.peak.counts, 
                    minNormalizedMeanRNA = min.norm.rna.counts, 
                    forceRerun = T)

grn_pM = filterData(GRN = grn_pM,
                    minNormalizedMean_peaks = min.norm.peak.counts, 
                    minNormalizedMeanRNA = min.norm.rna.counts,
                    forceRerun = T)
```

## Predict regulatory connections

Predict enhancer-gene connections in all the three domains:

```{r}
grn_p1 = addConnections_peak_gene(GRN = grn_p1,
                                  overlapTypeGene = "TSS",
                                  corMethod = "pearson",
                                  promoterRange = vicinity.radius,
                                  nCores = 2,
                                  plotDiagnosticPlots = T,
                                  forceRerun = T)

grn_p2 = addConnections_peak_gene(GRN = grn_p2,
                                  overlapTypeGene = "TSS",
                                  corMethod = "pearson",
                                  promoterRange = vicinity.radius,
                                  nCores = 2,
                                  plotDiagnosticPlots = T,
                                  forceRerun = T)

grn_pM = addConnections_peak_gene(GRN = grn_pM,
                                  overlapTypeGene = "TSS",
                                  corMethod = "pearson",
                                  promoterRange = vicinity.radius,
                                  nCores = 2,
                                  plotDiagnosticPlots = T,
                                  forceRerun = T)
```

Save the GRN objects:

```{r}
saveRDS(grn_p1,
        "../r_results/predict_correlated_expressed_gene_granie/grn_p1/grn_p1.rds")

saveRDS(grn_p2,
        "../r_results/predict_correlated_expressed_gene_granie/grn_p2/grn_p2.rds")

saveRDS(grn_pM,
        "../r_results/predict_correlated_expressed_gene_granie/grn_pM/grn_pM.rds")
```

For p1, the QC plots on page 1 of the corresponding PDF look good: (1) The raw p-value density for positively correlated connections for the real signal peak at at the smallest p-values (and although the density for the negatively correlated connections peaks at the same p-value range, the peak is much lower); (2) The ratio of positively correlated connections to negatively correlated connections is higher for real connections than for background connections; (3) Real connections demonstrate more extreme correlation coefficients than background connections.

For p2, the QC plots on page 1 of the corresponding PDF look worse than for p1, but still acceptable: (1) Almost the same as for p1 (looks OK); (2) The ratio of positively correlated connections to negatively correlated connections is higher for real connections than for background connections, but negligibly; (3) Real connections demonstrate more extreme correlation coefficients than background connections, but also negligibly.

For pMN, the QC plots on page 1 of the corresponding PDF look worse than for p1, but still acceptable: (1) Almost the same as for p2 (the background distributions are even less uniform than in p2 but are still OK); (2) The ratio of positively correlated connections to negatively correlated connections is higher for real connections than for background connections, but negligibly (exactly like for p2); (3) Real connections demonstrate more extreme correlation coefficients than background connections, but not as much as for p1 (although the distributions definitely look more different than for p2).

The weak dominance of positively correlated connections over negatively correlated connections in all the three domains (and especially in p2 and pMN) could be explained by either any technical problems with the data (for example, the number of samples for each domain is less than 12 which is considered the minimal number of samples for the successful GRaNIE analysis by the authors of the package) or by some biological effects (either a possible biological relevance of negative correlations between peak accessibility and gene expression, which GRaNIE authors dismiss, or a possible colocalisation of peaks and genes that are strongly positively regulated with peaks and genes that are strongly negatively regulated, so that genes under both modes of regulation would be found in any given vicinity around a peak; this possibility is in line with my previous failures to establish a working background and implies that long-range regulation that skips non-target genes and enhancers is predominant).

I tried to filter by the minimum mean normalised exression of 5 (default in GRaNIE) or 20, but then the QC becomes worse.

## Analyse the predicted connections

Extract the predicted ("real") connections and adjust their raw p-values:

```{r}
grn_p1 = readRDS("../r_results/predict_correlated_expressed_gene_granie/grn_p1/grn_p1.rds")

grn_p2 = readRDS("../r_results/predict_correlated_expressed_gene_granie/grn_p2/grn_p2.rds")

grn_pM = readRDS("../r_results/predict_correlated_expressed_gene_granie/grn_pM/grn_pM.rds")

p1.conn = as.data.frame(grn_p1@connections$peak_genes[["0"]]) %>%
  mutate(padj = p.adjust(peak_gene.p_raw, method = "BH"))

p2.conn = as.data.frame(grn_p2@connections$peak_genes[["0"]]) %>%
  mutate(padj = p.adjust(peak_gene.p_raw, method = "BH"))

pM.conn = as.data.frame(grn_pM@connections$peak_genes[["0"]]) %>%
  mutate(padj = p.adjust(peak_gene.p_raw, method = "BH"))
```

Annotate NFIA-dependent regions in all the predicted connections:

```{r}
p1.11.7.dep = readRDS(paste0("../r_results/diff_accessibility/tables/p1_D11_vs_D7_dep", 
                             "_fdr", fdr, "_min-l2fc", min.l2fc, "_min-baseMean", min.baseMean, ".rds"))

p2.11.7.dep = readRDS(paste0("../r_results/diff_accessibility/tables/p2_D11_vs_D7_dep", 
                             "_fdr", fdr, "_min-l2fc", min.l2fc, "_min-baseMean", min.baseMean, ".rds"))

pM.11.7.dep = readRDS(paste0("../r_results/diff_accessibility/tables/pM_D11_vs_D7_dep", 
                             "_fdr", fdr, "_min-l2fc", min.l2fc, "_min-baseMean", min.baseMean, ".rds"))

p1.regions.annot = read_delim(file = "../results/select_samples/featureCounts_WT_D7_p1_vs_WT_D11_p1.tsv",
                              delim = "\t",
                              col_names = TRUE,
                              col_select = c(Geneid,
                                             Chr,
                                             Start,
                                             End,
                                             Strand,
                                             Length)) %>%
  mutate(peak.ID = paste0(Chr, ":", Start, "-", End))

p2.regions.annot = read_delim(file = "../results/select_samples/featureCounts_WT_D7_p2_vs_WT_D11_p2.tsv",
                              delim = "\t",
                              col_names = TRUE,
                              col_select = c(Geneid,
                                             Chr,
                                             Start,
                                             End,
                                             Strand,
                                             Length)) %>%
  mutate(peak.ID = paste0(Chr, ":", Start, "-", End))

pM.regions.annot = read_delim(file = "../results/select_samples/featureCounts_WT_D7_pM_vs_WT_D11_pM.tsv",
                              delim = "\t",
                              col_names = TRUE,
                              col_select = c(Geneid,
                                             Chr,
                                             Start,
                                             End,
                                             Strand,
                                             Length)) %>%
  mutate(peak.ID = paste0(Chr, ":", Start, "-", End))

p1.dep.annot = p1.regions.annot %>%
  filter(Geneid %in% p1.11.7.dep)

p2.dep.annot = p2.regions.annot %>%
  filter(Geneid %in% p2.11.7.dep)

pM.dep.annot = pM.regions.annot %>%
  filter(Geneid %in% pM.11.7.dep)

p1.conn %<>%
  mutate(is_dependent = (peak.ID %in% p1.dep.annot$peak.ID))

p2.conn %<>%
  mutate(is_dependent = (peak.ID %in% p2.dep.annot$peak.ID))

pM.conn %<>%
  mutate(is_dependent = (peak.ID %in% pM.dep.annot$peak.ID))
```

Annotate NFIA elements in all the predicted connections:

```{r}
p1.nfia.df = readRDS(paste0("../r_results/select_diff_regions/", 
                                    "p1_dep_nfia_ranges_with_sites_plus-strand_80pc_match-fdr_", fdr.matches, 
                                    "_in-regions-of_fdr", fdr, "_min-l2fc", min.l2fc, "_min-baseMean", min.baseMean, ".rds")) %>%
  as.data.frame() %>%
  mutate(peak.ID = paste0(seqnames, ":", start, "-", end))

p2.nfia.df = readRDS(paste0("../r_results/select_diff_regions/", 
                                    "p2_dep_nfia_ranges_with_sites_plus-strand_80pc_match-fdr_", fdr.matches, 
                                    "_in-regions-of_fdr", fdr, "_min-l2fc", min.l2fc, "_min-baseMean", min.baseMean, ".rds")) %>%
  as.data.frame() %>%
  mutate(peak.ID = paste0(seqnames, ":", start, "-", end))

pM.nfia.df = readRDS(paste0("../r_results/select_diff_regions/", 
                                    "pM_dep_nfia_ranges_with_sites_plus-strand_80pc_match-fdr_", fdr.matches, 
                                    "_in-regions-of_fdr", fdr, "_min-l2fc", min.l2fc, "_min-baseMean", min.baseMean, ".rds")) %>%
  as.data.frame() %>%
  mutate(peak.ID = paste0(seqnames, ":", start, "-", end))

p1.conn %<>%
  mutate(is_element = (peak.ID %in% p1.nfia.df$peak.ID))

p2.conn %<>%
  mutate(is_element = (peak.ID %in% p2.nfia.df$peak.ID))

pM.conn %<>%
  mutate(is_element = (peak.ID %in% pM.nfia.df$peak.ID))
```

Annotate NFIA-dependent genes in all the predicted pairs:

```{r}
p1.ref.genes = readRDS("../r_results/diff_expression/tables/p1_ref_genes.rds")

p2.ref.genes = readRDS("../r_results/diff_expression/tables/p2_ref_genes.rds")

pM.ref.genes = readRDS("../r_results/diff_expression/tables/pM_ref_genes.rds")

p1.ref.genes.annot = gene_id_name %>%
  filter(gene_name %in% p1.ref.genes)

p2.ref.genes.annot = gene_id_name %>%
  filter(gene_name %in% p2.ref.genes)

pM.ref.genes.annot = gene_id_name %>%
  filter(gene_name %in% pM.ref.genes)

p1.conn %<>%
  mutate(is_dependent_gene = (gene.ENSEMBL %in% p1.ref.genes.annot$gene_id))

p2.conn %<>%
  mutate(is_dependent_gene = (gene.ENSEMBL %in% p2.ref.genes.annot$gene_id))

pM.conn %<>%
  mutate(is_dependent_gene = (gene.ENSEMBL %in% pM.ref.genes.annot$gene_id))
```

Annotate genes in all the predicted pairs with gene names:

```{r}
p1.conn %<>%
  left_join(gene_id_name,
            by = c("gene.ENSEMBL" = "gene_id"))

p2.conn %<>%
  left_join(gene_id_name,
            by = c("gene.ENSEMBL" = "gene_id"))

pM.conn %<>%
  left_join(gene_id_name,
            by = c("gene.ENSEMBL" = "gene_id"))
```

Annotate regions from all the predicted pairs with region IDs:

```{r}
p1.conn %<>%
  left_join(p1.regions.annot %>%
              dplyr::select(Geneid,
                            peak.ID) %>%
              dplyr::rename("RegionID" = "Geneid"),
            by = c("peak.ID" = "peak.ID"))

p2.conn %<>%
  left_join(p2.regions.annot %>%
              dplyr::select(Geneid,
                            peak.ID) %>%
              dplyr::rename("RegionID" = "Geneid"),
            by = c("peak.ID" = "peak.ID"))

pM.conn %<>%
  left_join(pM.regions.annot %>%
              dplyr::select(Geneid,
                            peak.ID) %>%
              dplyr::rename("RegionID" = "Geneid"),
            by = c("peak.ID" = "peak.ID"))
```

Save the final tables of all predicted pairs:

```{r}
saveRDS(p1.conn,
        "../r_results/predict_correlated_expressed_gene_granie/tables/p1_pairs_all.rds")

saveRDS(p2.conn,
        "../r_results/predict_correlated_expressed_gene_granie/tables/p2_pairs_all.rds")

saveRDS(pM.conn,
        "../r_results/predict_correlated_expressed_gene_granie/tables/pM_pairs_all.rds")
```

## Explore predicted region-gene pairs

Form the target sets of region-gene pairs:

```{r}
p1.conn.dep = p1.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_dependent)

p2.conn.dep = p2.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_dependent)

pM.conn.dep = pM.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_dependent)

p1.conn.element = p1.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_element)

p2.conn.element = p2.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_element)

pM.conn.element = pM.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_element)

p1.conn.dep.dep = p1.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_dependent & is_dependent_gene)

p2.conn.dep.dep = p2.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_dependent & is_dependent_gene)

pM.conn.dep.dep = pM.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_dependent & is_dependent_gene)

p1.conn.element.dep = p1.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_element & is_dependent_gene)

p2.conn.element.dep = p2.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_element & is_dependent_gene)

pM.conn.element.dep = pM.conn %>%
  filter(padj < fdr.pairs) %>%
  filter(is_element & is_dependent_gene)
```

Summarise the predicted region-gene pairs:

```{r}
cat("p1:\n")

cat("The number of significant region-gene pairs with NFIA-dependent regions:", nrow(p1.conn.dep), "\n")

cat("The number of significant region-gene pairs with NFIA elements:", nrow(p1.conn.element), "\n")

cat("The number of significant region-gene pairs with NFIA-dependent regions and genes:", nrow(p1.conn.dep.dep), "\n")

cat("The number of significant region-gene pairs with NFIA elements and NFIA-dependent genes:", nrow(p1.conn.element.dep), "\n")

cat("p2:\n")

cat("The number of significant region-gene pairs with NFIA-dependent regions:", nrow(p2.conn.dep), "\n")

cat("The number of significant region-gene pairs with NFIA elements:", nrow(p2.conn.element), "\n")

cat("The number of significant region-gene pairs with NFIA-dependent regions and genes:", nrow(p2.conn.dep.dep), "\n")

cat("The number of significant region-gene pairs with NFIA elements and NFIA-dependent genes:", nrow(p2.conn.element.dep), "\n")

cat("pM:\n")

cat("The number of significant region-gene pairs with NFIA-dependent regions:", nrow(pM.conn.dep), "\n")

cat("The number of significant region-gene pairs with NFIA elements:", nrow(pM.conn.element), "\n")

cat("The number of significant region-gene pairs with NFIA-dependent regions and genes:", nrow(pM.conn.dep.dep), "\n")

cat("The number of significant region-gene pairs with NFIA elements and NFIA-dependent genes:", nrow(pM.conn.element.dep), "\n")
```

There is only one significant NFIA element -- NFIA-dependent gene pair in p1, hence we will compare only p2 and pMN.

Save the tables of significant NFIA element -- NFIA-dependent gene pairs in p2 and pMN:

```{r}
saveRDS(p2.conn.element.dep,
        "../r_results/predict_correlated_expressed_gene_granie/tables/p2_pairs_nfia-element_nfia-dep-gene.rds")

saveRDS(pM.conn.element.dep,
        "../r_results/predict_correlated_expressed_gene_granie/tables/pM_pairs_nfia-element_nfia-dep-gene.rds")
```

Stratify the significant NFIA element -- NFIA-dependent gene pairs in p2 and pMN into positively and negatively correlated. We expect them all to be positively correlated:

```{r}
cat("The numbers of positively/negatively correlated significant pairs in p2:", 
    nrow(p2.conn.element.dep %>%
      filter(peak_gene.r > 0)), "/",
    nrow(p2.conn.element.dep %>%
      filter(peak_gene.r <= 0)), "\n")

cat("The numbers of positively/negatively correlated significant pairs in pM:", 
    nrow(pM.conn.element.dep %>%
      filter(peak_gene.r > 0)), "/",
    nrow(pM.conn.element.dep %>%
      filter(peak_gene.r <= 0)), "\n")
```

The vast majority of the pairs are correlated positively, as expected. But I need to check the one negatively correlated pair in pMN:

```{r}
pM.conn.element.dep %>%
      filter(peak_gene.r <= 0)
```
